<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd

		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd 

		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
  <!-- 加载数据库配置文件-->
  <context:property-placeholder location="classpath:database.properties"/>

  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
    destroy-method="close">
    <!--数据库驱动-->
    <property name="driverClassName" value="${jdbc.driver}"/>
    <!--连接数据库的url-->
    <property name="url" value="${jdbc.url}"/>
    <!--连接数据库的用户名-->
    <property name="username" value="${jdbc.username}"/>
    <!--连接数据库的密码-->
    <property name="password" value="${jdbc.password}"/>
    <!--最大连接数-->
    <property name="maxActive" value="10"/>
    <!--最大空闲数-->
    <property name="maxIdle" value="2"/>
    <!--初始化连接数-->
    <property name="initialSize" value="1"/>
  </bean>

  <!-- 2. 创建SqlSession的工厂 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">

    <property name="dataSource" ref="dataSource"></property>

    <!-- 当mybatis的xml文件和mapper接口不在相同包下时，需要用mapperLocations属性指定xml文件的路径 -->
    <!-- *是个通配符，代表所有的文件，**代表所有目录下 -->
    <property name="mapperLocations" value="classpath*:mybatis/mapper/*.xml"/>

    <!-- 指定mybatis核心配置文件 -->
    <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
  </bean>

  <!-- 3. 自动扫描加载Sql映射文件/接口 -->
  <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>

    <!-- basePackage:指定sql映射文件/接口所在的包（自动扫描）-->
    <property name="basePackage" value="mapper"></property>
  </bean>

  <!-- 4. 事务管理 -->
  <!-- dataSource:引用上面定义的数据源 -->
  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- 5. 使用声明式事务 -->
  <!-- transaction-manager：引用上面定义的事务管理器 -->
  <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

  <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    <property name="securityManager" ref="securityManager"></property>
    <property name="loginUrl" value="/login"></property>
    <property name="unauthorizedUrl" value="403.jsp"></property>
    <property name="filterChainDefinitions">
      <value>
        /login = anon
        /subLogin = anon
        /* = authc
      </value>
    </property>
  </bean>

  <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    <property name="realm" ref="realm"></property>
  </bean>

  <bean id="realm" class="com.whc.jun.realm.CustomRealm">
    <property name="credentialsMatcher" ref="credentialsMatcher"></property>
  </bean>

  <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    <property name="hashAlgorithmName" value="md5"></property>
    <property name="hashIterations" value="3"></property>
  </bean>

</beans>